## ðŸš€ Luego puedes iniciar el microservicio:

    npm start

    (para correr en modo debug, cuando hay errores):
         DEBUG=* npm start


## ðŸš€ Microservicio Completo Implementado
### Endpoints Disponibles:







bien, hay unos cambios.

para todos los casos hay que enviar, en el header:

Origin: http://localhost:8000 (setearlo en eenvvar)

X-API-Auth: dev_token_12345 (setearlo en envvar)

User-Agent: SymfonyApp/1.0 (setearlo en envvar)

ver estado de conexion con whatsapp de una location :

GET http://<<base_url>>/api/whatsapp/session/542346505040/status

siendo 542346505040 el phone de la location.

y recibimos algo asi:

{

"success": true,

"data": {

"isConnected": true,

"state": "connected",

"qrCode": null,

"phoneNumber": "542346505040"

}

}

para obtener el QR:

GET http://<<base_url>>/api/whatsapp/session/542346505040/qr

siendo 542346505040 el phone de la location.

obtenemos algo asi

{

"success": false,

"message": "QR no disponible",

"state": "connected"

}

POST http://<<base_url>>/api/whatsapp/session/542346505040/send-message (para enviar un mensaje) de prueba:

body:

{

"to": "5492346334077",

"message": "a que hora vnis? "

}

y responde:

{

"success": true,

"data": {

"success": true

}

}

POST {whatsappServiceUrl}/api/whatsapp/session/542346505040/send-template

enviar json:

{

"phone": "nÃºmero_telefono_paciente", (sin el + adelante)

"appointmentData": {

"patientName": "Nombre del paciente",

"professionalName": "Nombre del profesional",

"serviceName": "Nombre del servicio",

"scheduledAt": "2024-01-15T10:30:00+00:00",

"location": "Nombre de la ubicaciÃ³n"

},

"messageType": "confirmation|reminder|urgent",

"appointmentId": 123

}